import bridge from '@vkontakte/vk-bridge';

export interface VKUser {
  id: number;
  first_name: string;
  last_name: string;
  photo_100?: string;
  photo_200?: string;
}

export const initVK = async (): Promise<void> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ VK Bridge –¥–æ—Å—Ç—É–ø–µ–Ω
    if (typeof bridge !== 'undefined' && bridge.send) {
      await bridge.send('VKWebAppInit');
      console.log('VK Bridge initialized successfully');
    } else {
      console.warn('VK Bridge not available');
    }
  } catch (error) {
    console.warn('Failed to initialize VK Bridge (this is normal outside VK):', error);
  }
};

export const getVKUser = async (): Promise<VKUser | null> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ VK –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏–ª–∏ —ç—Ç–æ localhost –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (isVKEnvironment()) {
      const userInfo = await bridge.send('VKWebAppGetUserInfo');
      console.log('VK User info received:', userInfo);
      return userInfo;
    } else if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
      // –î–ª—è localhost –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      console.log('Localhost environment, using development user');
      return {
        id: 123456,
        first_name: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
        last_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
        photo_100: 'üë®‚Äçüíª'
      };
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('Unknown environment, using default user');
    return {
      id: 12345,
      first_name: '–¢–µ—Å—Ç',
      last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      photo_100: 'üë§'
    };
  } catch (error) {
    console.error('Failed to get VK user info:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return {
      id: 99999,
      first_name: '–ì–æ—Å—Ç—å',
      last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      photo_100: 'üë§'
    };
  }
};

export const isVKEnvironment = (): boolean => {
  return typeof window !== 'undefined' && 
         (window.location.hostname.includes('vk.com') || 
          window.location.hostname.includes('vk-apps.com') ||
          window.location.hostname.includes('vk.me'));
};

export const isLocalhostEnvironment = (): boolean => {
  return typeof window !== 'undefined' && 
         (window.location.hostname === 'localhost' || 
          window.location.hostname === '127.0.0.1' ||
          window.location.hostname.includes('192.168.') ||
          window.location.hostname.includes('10.0.'));
};

export const getVKUserSafe = async (): Promise<VKUser> => {
  try {
    if (isVKEnvironment()) {
      const userInfo = await bridge.send('VKWebAppGetUserInfo');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (userInfo && userInfo.id && userInfo.first_name) {
        return userInfo;
      }
      
      console.warn('Invalid user info received:', userInfo);
    } else if (isLocalhostEnvironment()) {
      // –î–ª—è localhost –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return {
        id: 123456,
        first_name: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
        last_name: 'Localhost',
        photo_100: 'üë®‚Äçüíª'
      };
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
      id: Date.now(),
      first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      last_name: '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      photo_100: 'üë§'
    };
  } catch (error) {
    console.error('Failed to get VK user info:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return {
      id: Date.now(),
      first_name: '–ì–æ—Å—Ç—å',
      last_name: '–û—à–∏–±–∫–∞',
      photo_100: '‚ùå'
    };
  }
};

export const getVKUserWithFallback = async (): Promise<VKUser> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (isVKEnvironment()) {
      const userInfo = await bridge.send('VKWebAppGetUserInfo');
      if (userInfo && userInfo.id && userInfo.first_name) {
        return userInfo;
      }
    }
    
    // –î–ª—è localhost –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
    if (isLocalhostEnvironment()) {
      return {
        id: 123456,
        first_name: 'Dev',
        last_name: 'User',
        photo_100: 'üë®‚Äçüíª'
      };
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
      id: Date.now(),
      first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      last_name: 'VK',
      photo_100: 'üë§'
    };
  } catch (error) {
    console.error('Failed to get VK user info:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
      id: Date.now(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
      first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      last_name: 'VK',
      photo_100: 'üë§'
    };
  }
};

export const getUserDisplayName = (user: VKUser): string => {
  return `${user.first_name} ${user.last_name.charAt(0)}.`;
};

export const getUserAvatar = (user: VKUser): string => {
  return user.photo_100 || user.photo_200 || 'üë§';
};

export const generateUserKey = (vkId: number): string => {
  return `vk_user_${vkId}`;
};